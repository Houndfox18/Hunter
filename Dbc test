package JinRyuu.JRMCore;

import java.util.List;
import net.minecraft.command.CommandBase;
import net.minecraft.command.ICommandSender;
import net.minecraft.command.WrongUsageException;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.server.MinecraftServer;

public class ComJrmca extends CommandBase {
	public String func_71517_b() {
		return "jrmca";
	}

	public String func_71518_a(ICommandSender icommandsender) {
		return "/jrmca (Set or Add) (Attribute) (Amount) [playerName]   ,where Attribute can be Alignment, Strength, Dexterity, Constitution, Willpower, Mind, Spirit or use /dbca Set All Max or Reset .";
	}

	public int func_82362_a() {
		return 2;
	}

	public void func_71515_b(ICommandSender par1ICommandSender, String[] par2ArrayOfStr) {
		if (par2ArrayOfStr.length <= 0) {
			throw new WrongUsageException(func_71518_a(par1ICommandSender), new Object[0]);
		}

		String s0 = par2ArrayOfStr[0];
		String s1 = par2ArrayOfStr[1];
		String s2 = par2ArrayOfStr[2];
		boolean set = (s0.contains("set")) || (s0.contains("SET")) || (s0.contains("Set"));
		boolean add = (s0.contains("add")) || (s0.contains("Add")) || (s0.contains("ADD"));

		boolean alignment = (s1.contains("alignment")) || (s1.contains("Alignment")) || (s1.contains("ALIGNMENT"));
		boolean stre = (s1.contains("strength")) || (s1.contains("Strength")) || (s1.contains("STRENGTH"));
		boolean dext = (s1.contains("dexterity")) || (s1.contains("Dexterity")) || (s1.contains("DEXTERITY"));
		boolean cons = (s1.contains("constitution")) || (s1.contains("Constitution")) || (s1.contains("CONSTITUTION"));
		boolean will = (s1.contains("willpower")) || (s1.contains("Willpower")) || (s1.contains("WILLPOWER"));
		boolean mind = (s1.contains("mind")) || (s1.contains("Mind")) || (s1.contains("MIND"));
		boolean conc = s1.toLowerCase().contains("spirit");

		boolean all = (s1.contains("all")) || (s1.contains("All")) || (s1.contains("ALL"));
		boolean max = (s2.contains("max")) || (s2.contains("Max")) || (s2.contains("MAX"));
		boolean reset = (s2.contains("reset")) || (s2.contains("Reset")) || (s2.contains("RESET"));

		boolean num = false;
		if ((!(max)) && (!(reset)))
			num = true;

		boolean amount = s2.length() > 0;

		int i = 1;
		try {
			i = func_71526_a(par1ICommandSender, s2);
		} catch (Exception exception) {
			i = 1;
		}

		int am = JRMCoreConfig.attrMx;

		if (i < 1)
			i = 1;
		if (i > am)
			i = am;
		EntityPlayerMP entityplayermp;
		EntityPlayerMP entityplayermp;
		if (par2ArrayOfStr.length > 3) {
			entityplayermp = func_82359_c(par1ICommandSender, par2ArrayOfStr[3]);
		} else {
			entityplayermp = func_71521_c(par1ICommandSender);
		}

		short str = JRMCoreH.getShort(entityplayermp, JRMCoreH.AttrbtNbt[0]);
		short dex = JRMCoreH.getShort(entityplayermp, JRMCoreH.AttrbtNbt[1]);
		short cns = JRMCoreH.getShort(entityplayermp, JRMCoreH.AttrbtNbt[2]);
		short wil = JRMCoreH.getShort(entityplayermp, JRMCoreH.AttrbtNbt[3]);
		short min = JRMCoreH.getShort(entityplayermp, JRMCoreH.AttrbtNbt[4]);
		short cnc = JRMCoreH.getShort(entityplayermp, JRMCoreH.AttrbtNbt[5]);

		String att = "";
		String attnam = "";
		if (stre) {
			att = JRMCoreH.AttrbtNbt[0];
			int cur = str;
			attnam = "Strength";
			i = ((add) && (cur + i > am)) ? am - cur : ((set) && (i > am)) ? am : i;
		}
		if (dext) {
			att = JRMCoreH.AttrbtNbt[1];
			int cur = dex;
			attnam = "Dexterity";
			i = ((add) && (cur + i > am)) ? am - cur : ((set) && (i > am)) ? am : i;
		}
		if (cons) {
			att = JRMCoreH.AttrbtNbt[2];
			int cur = cns;
			attnam = "Constitution";
			i = ((add) && (cur + i > am)) ? am - cur : ((set) && (i > am)) ? am : i;
		}
		if (will) {
			att = JRMCoreH.AttrbtNbt[3];
			int cur = wil;
			attnam = "Willpower";
			i = ((add) && (cur + i > am)) ? am - cur : ((set) && (i > am)) ? am : i;
		}
		if (mind) {
			att = JRMCoreH.AttrbtNbt[4];
			int cur = min;
			attnam = "Mind";
			i = ((add) && (cur + i > am)) ? am - cur : ((set) && (i > am)) ? am : i;
		}
		if (conc) {
			att = JRMCoreH.AttrbtNbt[5];
			int cur = cnc;
			attnam = "Spirit";
			i = ((add) && (cur + i > am)) ? am - cur : ((set) && (i > am)) ? am : i;
		}
		if ((((stre) || (dext) || (cons) || (will) || (mind) || (conc))) && (amount)) {
			int cur = JRMCoreH.getShort(entityplayermp, att);
			JRMCoreH.setShort((set) ? i : (i < 1) ? 1 : (add) ? cur + i : (cur + i < 1) ? 1 : (max) ? am : 1,
					entityplayermp, att);
			notifyAdmins(par1ICommandSender,
					"Attribute " + ((set) ? attnam + " was set to " + i
							: ((add) && (cur + i >= 1)) ? "Adding " + i + " to " + attnam
									: new StringBuilder().append(attnam).append(" was set to ").append((max) ? am : 1)
											.toString())
							+ " Success",
					new Object[] { Integer.valueOf(i), entityplayermp.func_70005_c_() });
		} else if ((alignment) && (amount)) {
			int cur = JRMCoreH.getByte(entityplayermp, "jrmcAlign");
			if (alignment) {
				att = "jrmcAlign";
				attnam = "Alignment";
				i = ((add) && (cur + i > 100)) ? 100 - cur : ((set) && (i > 100)) ? 100 : i;
			}
			JRMCoreH.setByte((set) ? i : (i < 1) ? 1 : (add) ? cur + i : (cur + i < 1) ? 1 : (max) ? am : 1,
					entityplayermp, att);
			notifyAdmins(par1ICommandSender,
					"Attribute " + ((set) ? attnam + " was set to " + i
							: ((add) && (cur + i >= 1)) ? "Adding " + i + " to " + attnam
									: new StringBuilder().append(attnam).append(" was set to ").append((max) ? 100 : 1)
											.toString())
							+ " Success",
					new Object[] { Integer.valueOf(i), entityplayermp.func_70005_c_() });
		} else if ((set) && (all) && (num)) {
			for (int i1 = 0; i1 < JRMCoreH.AttrbtNbt.length; ++i1) {
				JRMCoreH.setShort(i, entityplayermp, JRMCoreH.AttrbtNbt[i1]);
			}
		} else if ((set) && (all) && (((max) || (reset)))) {
			if (max) {
				JRMCoreH.setShort(JRMCoreConfig.attrMx, entityplayermp, JRMCoreH.AttrbtNbt[0]);
				JRMCoreH.setShort(JRMCoreConfig.attrMx, entityplayermp, JRMCoreH.AttrbtNbt[1]);
				JRMCoreH.setShort(JRMCoreConfig.attrMx, entityplayermp, JRMCoreH.AttrbtNbt[2]);
				JRMCoreH.setShort(JRMCoreConfig.attrMx, entityplayermp, JRMCoreH.AttrbtNbt[3]);
				JRMCoreH.setShort(JRMCoreConfig.attrMx, entityplayermp, JRMCoreH.AttrbtNbt[4]);
				JRMCoreH.setShort(JRMCoreConfig.attrMx, entityplayermp, JRMCoreH.AttrbtNbt[5]);
			}

			if (reset) {
				byte pwr = JRMCoreH.getByte(entityplayermp, "jrmcPwrtyp");
				byte rce = JRMCoreH.getByte(entityplayermp, "jrmcRace");
				int STR = JRMCoreH.attrStart(pwr, 0, rce);
				int DEX = JRMCoreH.attrStart(pwr, 1, rce);
				int CON = JRMCoreH.attrStart(pwr, 2, rce);
				int WIL = JRMCoreH.attrStart(pwr, 3, rce);
				int MND = JRMCoreH.attrStart(pwr, 4, rce);
				int SPI = JRMCoreH.attrStart(pwr, 5, rce);
				JRMCoreH.setShort(STR, entityplayermp, JRMCoreH.AttrbtNbt[0]);
				JRMCoreH.setShort(DEX, entityplayermp, JRMCoreH.AttrbtNbt[1]);
				JRMCoreH.setShort(CON, entityplayermp, JRMCoreH.AttrbtNbt[2]);
				JRMCoreH.setShort(WIL, entityplayermp, JRMCoreH.AttrbtNbt[3]);
				JRMCoreH.setShort(MND, entityplayermp, JRMCoreH.AttrbtNbt[4]);
				JRMCoreH.setShort(SPI, entityplayermp, JRMCoreH.AttrbtNbt[5]);
			}

			notifyAdmins(par1ICommandSender,
					"Attribute Everything for " + entityplayermp.func_70005_c_() + " has been "
							+ ((reset) ? "Reset" : (max) ? "Maxed" : "failed"),
					new Object[] { Integer.valueOf(i), entityplayermp.func_70005_c_() });
		} else {
			throw new WrongUsageException("Attribute Change Failure", new Object[0]);
		}

		EntityPlayerMP player = entityplayermp;
		NBTTagCompound nbt = nbt(player, "pres");
		int[] PlyrAttrbts = JRMCoreH.PlyrAttrbts(player);
		byte pwr = nbt.func_74771_c("jrmcPwrtyp");
		byte rce = nbt.func_74771_c("jrmcRace");
		byte cls = nbt.func_74771_c("jrmcClass");
		int maxBody = JRMCoreH.stat(pwr, 2, PlyrAttrbts[2], rce, cls, 0.0F);
		int maxEnergy = JRMCoreH.stat(pwr, 5, PlyrAttrbts[5], rce, cls, 0.0F);
		int maxStam = JRMCoreH.stat(pwr, 3, PlyrAttrbts[2], rce, cls, 0.0F);

		JRMCoreH.setInt(maxBody, player, "jrmcBdy");
		JRMCoreH.setInt(maxEnergy, player, "jrmcEnrgy");
		JRMCoreH.setInt(maxStam, player, "jrmcStamina");
	}

	int calc1(int j, int l) {
		int i = 0;
		for (int k = 0; k < j; ++k)
			i += i + l;
		return i;
	}

	int calc2(int j, int l) {
		int i = 0;
		for (int k = 0; k < j / l; ++k) {
			int z = (k * l / 50 <= 0) ? 1 : k * l / 50;
			i += z;
		}
		return i;
	}

	private NBTTagCompound nbt(EntityPlayer p, String s) {
		return JRMCoreH.nbt(p, s);
	}

	private void notifyAdmins(ICommandSender par1iCommandSender, String string, Object[] objects) {
		func_152373_a(par1iCommandSender, this, string, objects);
	}

	public List func_71516_a(ICommandSender par1ICommandSender, String[] par2ArrayOfStr) {
		return ((par2ArrayOfStr.length == 4) ? func_71530_a(par2ArrayOfStr, getListOfPlayers()) : null);
	}

	protected String[] getListOfPlayers() {
		return MinecraftServer.func_71276_C().func_71213_z();
	}

	public boolean isUsernameIndex(int par1) {
		return (par1 == 0);
	}
